[metadata]
title=Perl Snippets
author=Kingsley Gordon <kingsley.gordon@morganstanley.com>

[Core Functions]
title=sprintf
tags=sprintf
text=<<END

Between the %  and the format letter, you may specify a an explicit format
parameter index, such as 2$. By default sprintf will format the next unused
argument in the list, but this allows you to take the arguments out of order.

Eg:

	printf '%2$d %1$d', 12, 34;      # prints "34 12"
	printf '%3$d %d %1$d', 1, 2, 3;  # prints "3 1 1"
END

title=caller
tags=caller
text=<<END

(caller(0))[3]
	returns the current package and subroutine.

(caller(1))[3]
	returns the package and subroutine that called this one.

(my $caller = (caller(1))[3]) =~ s/.*://;
	returns just the subroutine name that called this one.
END

title=IO::File
tags=io::file io
text=<<END

r  =>  Open text file for reading. The stream is positioned at the beginning of
       the file. 

r+ =>  Open for reading and writing. The stream is positioned at the beginning
       of the file. 

w  =>  Truncate file to zero length or create text file for writing. The stream
       is positioned at the beginning of the file. 

w+ =>  Open for reading and writing. The file is created if it does not exist,
       otherwise it is truncated. The stream is positioned at the beginning of
       the file. 

a  =>  Open for writing. The file is created if it does not exist. The stream is
       positioned at the end of the file. 

a+ =>  Open for reading and writing. The file is created if it does not exist.
       The stream is positioned at the end of the file.


Examples:

    my $log_fh = IO::File->new($log_file, 'a');

	    die "Can't open log file '$log_file': $!\n"
		        unless $log_fh;

				    $log_fh->autoflush(1);


my $fh = new IO::File('file', 'r'); # default perms are 0666.
	if (defined $fh) {
		print <$fh>;
		undef $fh;       # automatically closes the file
	}

my $fh = new IO::File('file', 'r'); # default perms are 0666.
	if (defined $fh) {
		undef $/; # Slurp mode.
		$foo = <$fh>;
		undef $fh;       # automatically closes the file
	}

my $fh = new IO::File('file', 'w', '0755'); # Executable file.
	if (defined $fh) {
		print $fh "This is a string\n";
		undef $fh;       # automatically closes the file
	}

END


[SQL]
title=SQL Commands
tags=rowcount
text=<<END
SET ROWCOUNT 10
SELECT * FROM FOO
SET ROWCOUNT 0

Be sure to set the ROWCOUNT both before and after the query. Setting the
ROWCOUNT to zero indicates that all rows should be returned. If you do not
reset the ROWCOUNT after issuing the query, subsequent queries will also limit
the number of rows returned according to the value of ROWCOUNT.

To get the last entry.

set rowcount 1
select TradeId from Trade order by TradeId desc
set rowcount 0

Select
SELECT "column_name" FROM "table_name"

Distinct
SELECT DISTINCT "column_name"
FROM "table_name"

Where
SELECT "column_name"
FROM "table_name"
WHERE "condition"

And/Or
SELECT "column_name"
FROM "table_name"
WHERE "simple condition"
{[AND|OR] "simple condition"}+

In
SELECT "column_name"
FROM "table_name"
WHERE "column_name" IN ('value1', 'value2', ...)

Between
SELECT "column_name"
FROM "table_name"
WHERE "column_name" BETWEEN 'value1' AND 'value2'

Like
SELECT "column_name"
FROM "table_name"
WHERE "column_name" LIKE {PATTERN}

Order By
SELECT "column_name"
FROM "table_name"
[WHERE "condition"]
ORDER BY "column_name" [ASC, DESC]

Count
SELECT COUNT("column_name")
FROM "table_name"

Group By
SELECT "column_name1", SUM("column_name2")
FROM "table_name"
GROUP BY "column_name1"

Having
SELECT "column_name1", SUM("column_name2")
FROM "table_name"
GROUP BY "column_name1"
HAVING (arithematic function condition)

Create Table
CREATE TABLE "table_name"
("column 1" "data_type_for_column_1",
"column 2" "data_type_for_column_2",
... )

Drop Table
DROP TABLE "table_name"

Truncate Table
TRUNCATE TABLE "table_name"

Insert Into
INSERT INTO "table_name" ("column1", "column2", ...)
VALUES ("value1", "value2", ...)

Update
UPDATE "table_name"
SET "column_1" = [new value]
WHERE {condition}

Delete From
DELETE FROM "table_name"
WHERE {condition} 
END


[Regexes]
title=Pattern Match Vars
tags=backreferences regexes
text=<<END
$+ => Returns the last parenthesized pattern match

$& => Returns the entire matched string

$` => Returns everything before the matched string

$' => Returns everything after the matched string 

Patterns with captures are often used in list context to populate a list of
values, since the pattern is smart enough to return the captured substrings as
a list:

my ($FirstPart, $SecondPart, $ThirdPart) = ($TestString =~ m/(.*)(this)(.*)/);

($first, $last)        =  /^(\w+) (\w+)$/;
($full, $first, $last) =  /^((\w+) (\w+))$/;

Printing without assigning:
printf('%s-%s-%s ', ($date =~ /(\d{4})(\d{2})(\d{2})/x));

END

[File IO]
title=Slurp Mode and Paragraph Mode
tags=slurpmode $/
text=<<END
# Slurp Mode

undef $/;
open(FILE, "data.htm");
$html = <FILE>;
close(FILE);

# Paragraph Mode

$/ = '';
END

title=Hash of All Files in a Directory
tags=hash_of_files opendir
text=<<END
Returns a Hash in which the full path is the key
and the filename is the value.

sub get_files {
	my $dir = shift;
	opendir(DIR, $dir) or die "Can't open $dir: $!";
	my %all_files = map {$dir . $_, $_} grep(!/\.\.?$/, readdir DIR);
	close DIR;
	return \%all_files;
}
END

title=File Test Operators
tags=file_tests 
text=<<END
perldoc -f -x
END

title=Capturing STDERR
tags=stderr
text=perldoc -q stderr

[Strings]
title=Indenting HereDocs
tags=EOQ EOF HEREDOC
text=<<END

# This will also kill all blank lines which may not be what you want.
(my $foo = <<EOQ) =~ s/^\s+//gm;
	doler ipsum lorum

	your tesxt goes here!
EOQ

# This preserves blank lines.
(my $foo = <<EOQ) =~ s/^\S+\n//gm;
	doler ipsum lorum

	your tesxt goes here!
EOQ

END

[CGI / HTML]
title=Redirecting CGI Errors
tags=cgi_errors
text=<<END
BEGIN {
	use CGI::Carp qw/carpout/;
	open(LOG, ">> error.log") or die "Can't append to error.log: $!\n";
	&carpout (*LOG);
}

	OR

use CGI::Carp qw/fatalsToBrowser/;
END

title=HTML Forms with CGI.pm
tags=cgi_forms cgi_fields
text=<<END
$q->startform;
$q->hidden(-name=>'datafile');
$q->hidden(-name=>'Index', -value=>"$index")
$q->textfield(-name=>'Name', -size=>30);
$q->popup_menu(-name=>'hour', -values=>[1..12], -labels=>$hash_ref);
$q->textarea(-name=>'foo', -rows=>10, -cols=>10);
$q->password_field(-name=>'foo', -maxlength=>10);
$q->radio_group(-name=>'meridiem', -values=>[qw/am pm/]);
$q->checkbox_group(-name=>'test', -values=>[qw/am pm/], -default=>[qw/am pm/], -linebreak=>'true', -labels=>\%labels);
$q->checkbox(-name=>'test', -value=>'ON', -checked=>'checked', -label=>'Hi');
$q->submit(-name=>'create_db', -value=>'New DB')
$q->endform();
END

[ARRAYS]
title=Shuffle an Array
tags=shuffle
text=<<END
use List::Util qw/shuffle/;                   
my @colors = qw/red green blue white yellow black maroon/;
my $color = shuffle(@colors);
print $color;
END

title=Display an Array in an HTML Table
tags=array2html_table
text=<<END
# Convert an array of data to an array of HTML table rows.
# Takes 2 parameters: the num of columns and the array ref.

sub table_rows {
        my ($cols, $aref) = @_;
        my $len = scalar @$aref;
        my $padding = $len % $cols ? $cols - ($len % $cols) : 0;

        while ($padding) {
                push @$aref, '&nbsp;';
                $len++;
                $padding--;
        }

        my $last_row = $len / $cols;

        my @tmp;
        for my $n (0 .. $cols-1) {
                $tmp[$n] = [splice @$aref, 0, $last_row];
        }

        my @output;

        for my $i (0 .. $last_row-1) {
                push @output, "<tr>";
                for my $c (0 .. $cols-1) {
                        push @output, "<td>$tmp[$c][$i]</td>";
                }
                push @output, "</tr>\n";
        }
        return @output;
}

my $test = [ qw(a1 b2 c3 d4 e5 f6 g7 h8 i9 j10 k11 L12 m13 n14)];
# m13 n14 o15 p16)]; # q16 r17 s18 t19 u20 v21 w22 x23 y24 z25) ];
END

[ENV]
title=Current Script Name
tags=en_passant usage __FILE__
text=<<END
(my $script_name = __FILE__) =~ s#.*/##;  # __FILE__ = full path to file

OR

(my $script_name = $0) =~ s#.*/##;        # $0 = full path to script
END

[MODULES]
title=Installing Perl Modules Manually without Root
tags=module_install perl_modules
text=<<END
# If you have you own complete perl distribution.
	perl Makefile.PL PREFIX=/u/mydir/perl  

# If you just want the module installed in your own directory.
	perl Makefile.PL LIB=/u/mydir/perl

	make
	make test
	make install
END

[MAIL]
title=HTML Email from Sendmail or Mutt
tags=mutt-html_email
text=<<END
> I am newbie to UNIX, I tried to write a Perl program for
> email sending, the mailing program I am using is sendmail,
> my question is how can I send a HTML format email by
> sendmail?? what is the param or instruction, thx

Purists among you look away now!

Quite easy, stick the following in your mail header, probably straight after
the Subject: field.

Content-Type: text/html; charset="iso-8859-1"

Then, any HTML you slam in the message body will come out right in mail clients
that understand it.  It won't look pretty if they don't understand it.
END

[DATE and TIME]
title=Yesterday's Date, SQL Date
tags=yesterday_date sql_date
text=<<END
sub get_date {
    my $time = shift;
    my ($day, $month, $year) = (localtime $time)[3, 4, 5];
    return sprintf("%04d-%02d-%02d", $year+1900, $month+1, $day);
}

sub get_date {
	my $offset = shift;
    my $time = time;
	my ($direction, $length, $unit) = ($offset =~ /^(+|-)(\d+) ?(m|d|y)/i);
    my ($day, $month, $year) = (localtime $time)[3, 4, 5];
    return sprintf("%04d-%02d-%02d", $year+1900, $month+1, $day);
}



sub english_date {
    my $time = shift;
	my @months = qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/;
    my ($day, $month, $year) = (localtime $time)[3, 4, 5];
    return sprintf("%s %s %04d", $day, $months[$month], $year+1900);
}

sub english_date_and_time {
    my $time = shift;
	my @months = qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/;
    my ($min, $hour, $day, $month, $year) = (localtime $time)[1, 2, 3, 4, 5];
    return sprintf("%s %s %04d %02d:%02d", $day, $months[$month], $year+1900);
}

sub sql_date {
    my $time = shift;
    my ($sec, $min, $hour, $day, $month, $year) = (localtime $time)[0 .. 5];
    return sprintf("%04d/%02d/%02d %2d:%2d:%2d", $year+1900, $month+1, $day, $hour, $min, $sec);
}

# Print the mtime of a file called ./xxd
	print sql_date( (stat './xxd')[9] ); 

# Print the current time in sql format
	print sql_date(time);
 
# Number of seconds in a day = 86400;
	print get_date(time); # today's date
	print sql_date(time); # today's date

# Yesterday's date
	print get_date(time - 86400); 

# A better way

	use DateTime;
	my $dt = DateTime->now->subtract( days => 1);

	$ymd    = $dt->ymd;           # 2002-12-06
	$ymd    = $dt->ymd('/');      # 2002/12/06

	$mdy    = $dt->mdy;           # 12-06-2002
	$mdy    = $dt->mdy('/');      # 12/06/2002

	$dmy    = $dt->dmy;           # 06-12-2002
	$dmy    = $dt->dmy('/');      # 06/12/2002

	$hms    = $dt->hms;           # 14:02:29
	$hms    = $dt->hms('!');      # 14!02!29

END

[JavaScript]
title=Loop Through an Array
tags=arrays for loop
text=<<END
function SumCosts(costArray)
{
  var sum = 0;
  for (var i=0; i<costArray.length; i++)
    sum = sum + costArray[i];
  return sum;
}
END

title=methods
tags=function syntax
text=<<END
Method calls must include parentheses:

names = ["John", "Andrea", "Charlie", "Sam", "Kate"]
sorted_names = names.sort()
document.write(sorted_names) 
END

[Web Testing]
title=Testing MS Intranet Web Sites
tags=testing web
text=<<END

1. edit .netrc to look like this:
machine piias73.ms.com login kingslgo password foobar
END
