let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
cnoremap <silent> <F5> :execute ":bprevious!"
inoremap <silent> <F5> :execute ":bprevious!"
cnoremap <silent> <C-S-Tab> :execute ":bprevious!"
inoremap <silent> <C-S-Tab> :execute ":bprevious!"
cnoremap <silent> <F6> :execute ":bnext!"
inoremap <silent> <F6> :execute ":bnext!"
cnoremap <silent> <C-Tab> :execute ":bnext!"
inoremap <silent> <C-Tab> :execute ":bnext!"
map  va>d
map [21~ :call Test()
map FF !Gperl -MText::Autoformat -e 'autoformat{all=>1}'
map Q gq
vmap S :perldo s/([A-Z])/"_".lc($1)/eg
nmap <silent> \qq :QuickSession
nnoremap <silent> \prfs :PFRefreshFileStatus
nnoremap <silent> \prap :PFRefreshActivePane
map ^[[21~ :call Integrate()
nmap gx <Plug>NetrwBrowseX
vnoremap p :let current_reg = @"gvs=current_reg
vmap zf mz:'<O//{{{'>o// }}}`z?{{{A 
map <F4> :w:!perl -w %
map <F3> :w:make
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetBrowseX(expand("<cWORD>"),0)
map <F5> :w:!podchecker %
noremap <silent> <C-S-Tab> :execute ":bprevious!"
noremap <silent> <F6> :execute ":bnext!"
noremap <silent> <C-Tab> :execute ":bnext!"
map <silent> <F1> :call BufferList()
map <F11> :call P4Revert()
map <F12> :call P4Edit()
map <F8> :call Make_Session()
map <C-Right> :bn
map <C-Left> :bp
map!  <br />
map!  <p>
map!  &nbsp;
cnoremap  =perforce#PFOpenAltFile(1)
cabbr hr i<a href=></a>F>
cabbr mikify %s/->/ -> /g
cabbr unmikify %s/ -> /->/g
cabbr rhelp !cd $HOME/.vim/doc && makehelp.pl > erick.txt :helpt $HOME/.vim/doc
cabbr ht helpt $HOME/.vim/doc
cabbr snip e $HOME/.vim/doc/snippet.ini
cabbr ebash e $HOME/.bashrc
cabbr rc e $HOME/.vimrc
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set backspace=2
set cmdheight=2
set directory=/var/tmp
set grepprg=grep\ -ni
set history=50
set hlsearch
set incsearch
set isfname=@,48-57,/,.,-,_,+,,,#,$,%,~,=,:
set makeprg=perl\ -Wc\ %
set pastetoggle=<F8>
set ruler
set rulerformat=%170(%{perforce#RulerStatus()}%=%{perforce#RulerStatus()}%=%{perforce#RulerStatus()}%=%{perforce#RulerStatus()}%=%{perforce#RulerStatus()}%=%{perforce#RulerStatus()}%=%l,%c%V%=%5(%p%%%)%)
set shell=bash
set shiftwidth=4
set showcmd
set showmatch
set tabstop=4
set viminfo=!,'20,<50,s10,h
set visualbell
set window=56
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/dev/fidcredit/spgUtils/trunk/src/lib/perl5/SPG/Reports/Format
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 CSV/Custom/spg_abs_tg_prop_ny/Loader.pm
badd +1 CSV/Custom/spg_abs_tg_prop_ny/PnL.pm
badd +74 CSV/Custom/spg_abs_tg_prop_ny/PnL/Diffs.pm
badd +23 CSV/Custom/spg_abs_tg_prop_ny/PnL/Diffs/Basket.pm
badd +45 CSV/Custom/spg_abs_tg_prop_ny/PnL/Diffs/Index.pm
badd +69 CSV/Custom/spg_abs_tg_prop_ny/PnL/Diffs/SingleName.pm
badd +1 CSV/HistoricalPnL.pm
badd +1 CSV/Loader.pm
badd +1 CSV/NAT.pm
badd +1 CSV/NAT/Index.pm
badd +1 CSV/NAT/SingleName.pm
badd +1 CSV/PnL.pm
badd +1 CSV/PnL/Diffs.pm
badd +1 CSV/PnL/Diffs/Basket.pm
badd +22 CSV/PnL/Diffs/Index.pm
badd +39 CSV/PnL/Diffs/SingleName.pm
badd +1 Excel/Loader.pm
badd +1 Excel/MMMarks.pm
badd +1 Excel/NAT.pm
badd +1 Excel/NAT/Basket.pm
badd +1 Excel/NAT/Index.pm
badd +1 Excel/NAT/SingleName.pm
badd +1 Excel/OET.pm
badd +1 Excel/PnL.pm
badd +289 Excel/PnL/Diffs.pm
badd +214 Excel/PnL/Diffs/Basket.pm
badd +1 Excel/PnL/Diffs/Index.pm
badd +28 Excel/PnL/Diffs/SingleName.pm
badd +1 Excel/PnL/EOD.pm
badd +1 Excel/PnL/EOD/Basket.pm
badd +1 Excel/PnL/PriorEOD.pm
badd +1 Excel/PnL/PriorEOD/Basket.pm
badd +1 Excel/TTR.pm
badd +1 CSV/Custom/spg_abs_tg_cf_ny/PnL.pm
badd +1 CSV/Custom/spg_abs_tg_cf_ny/PnL/Diffs.pm
badd +1 CSV/Custom/spg_abs_tg_cf_ny/PnL/Diffs/Basket.pm
badd +1 CSV/Custom/spg_abs_tg_cf_ny/PnL/Diffs/Index.pm
badd +1 CSV/Custom/spg_abs_tg_cf_ny/PnL/Diffs/SingleName.pm
badd +233 Excel/GlobalFactorComparison.pm
badd +17 Excel/PnL/Diffs/Corp.pm
badd +1 Excel/CPFees.pm
args CSV/Custom/spg_abs_tg_cf_ny/Loader.pm CSV/Custom/spg_abs_tg_cf_ny/PnL.pm CSV/Custom/spg_abs_tg_cf_ny/PnL/Diffs.pm CSV/Custom/spg_abs_tg_cf_ny/PnL/Diffs/Basket.pm CSV/Custom/spg_abs_tg_cf_ny/PnL/Diffs/Index.pm CSV/Custom/spg_abs_tg_cf_ny/PnL/Diffs/SingleName.pm CSV/Custom/spg_abs_tg_prop_ny/Loader.pm CSV/Custom/spg_abs_tg_prop_ny/PnL.pm CSV/Custom/spg_abs_tg_prop_ny/PnL/Diffs.pm CSV/Custom/spg_abs_tg_prop_ny/PnL/Diffs/Basket.pm CSV/Custom/spg_abs_tg_prop_ny/PnL/Diffs/Index.pm CSV/Custom/spg_abs_tg_prop_ny/PnL/Diffs/SingleName.pm CSV/HistoricalPnL.pm CSV/Loader.pm CSV/NAT.pm CSV/NAT/Index.pm CSV/NAT/SingleName.pm CSV/PnL.pm CSV/PnL/Diffs.pm CSV/PnL/Diffs/Basket.pm CSV/PnL/Diffs/Index.pm CSV/PnL/Diffs/SingleName.pm Excel/Loader.pm Excel/MMMarks.pm Excel/NAT.pm Excel/NAT/Basket.pm Excel/NAT/Index.pm Excel/NAT/SingleName.pm Excel/OET.pm Excel/PnL.pm Excel/PnL/Diffs.pm Excel/PnL/Diffs/Basket.pm Excel/PnL/Diffs/Index.pm Excel/PnL/Diffs/SingleName.pm Excel/PnL/EOD.pm Excel/PnL/EOD/Basket.pm Excel/PnL/PriorEOD.pm Excel/PnL/PriorEOD/Basket.pm Excel/TTR.pm
edit Excel/CPFees.pm
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
edit Excel/CPFees.pm
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <silent> <F9> :call Perl_Debugger():redraw!
map <buffer> <silent> \ro :call Perl_Toggle_Gvim_Xterm()
map <buffer> <silent> \rk :call Perl_Settings()
vmap <buffer> <silent> \rh :call Perl_Hardcopy("v")
nmap <buffer> <silent> \rh :call Perl_Hardcopy("n")
omap <buffer> <silent> \rh :call Perl_Hardcopy("n")
map <buffer> <silent> \rt :call Perl_SaveWithTimestamp()
map <buffer> <silent> \rc :call Perl_Perlcritic():redraw:call Perl_PerlcriticMsg()
map <buffer> <silent> \rm :call Perl_Smallprof()
vmap <buffer> <silent> \ry :call Perl_Perltidy("v")
nmap <buffer> <silent> \ry :call Perl_Perltidy("n")
omap <buffer> <silent> \ry :call Perl_Perltidy("n")
map <buffer> <silent> \rg :call Perl_perldoc_generate_module_list():redraw!
map <buffer> <silent> \ri :call Perl_perldoc_show_module_list()
map <buffer> <silent> \h :call Perl_perldoc()
map <buffer> <silent> \rp :call Perl_perldoc()
nmap <buffer> <silent> \re :call Perl_MakeScriptExecutable()
map <buffer> <silent> \rd :call Perl_Debugger():redraw!
map <buffer> <silent> \rw :call Perl_PerlSwitches()
map <buffer> <silent> \ra :call Perl_Arguments()
map <buffer> <silent> \rs :call Perl_SyntaxCheck():redraw!:call Perl_SyntaxCheckMsg()
map <buffer> <silent> \rr :call Perl_Run()
nnoremap <buffer> <silent> \px a[:xdigit:]
nnoremap <buffer> <silent> \pw a[:word:]
nnoremap <buffer> <silent> \pu a[:upper:]
nnoremap <buffer> <silent> \ps a[:space:]
nnoremap <buffer> <silent> \pn a[:punct:]
nnoremap <buffer> <silent> \pp a[:print:]
nnoremap <buffer> <silent> \pl a[:lower:]
nnoremap <buffer> <silent> \pg a[:graph:]
nnoremap <buffer> <silent> \pd a[:digit:]
nnoremap <buffer> <silent> \pc a[:cntrl:]
nnoremap <buffer> <silent> \pb a[:blank:]
nnoremap <buffer> <silent> \pi a[:ascii:]
nnoremap <buffer> <silent> \ph a[:alpha:]
nnoremap <buffer> <silent> \pa a[:alnum:]
vnoremap <buffer> <silent> \ipi :call Perl_OpenPipe("v")a
nnoremap <buffer> <silent> \ipi :call Perl_OpenPipe("a")a
vnoremap <buffer> <silent> \io :call Perl_OpenOutputFile("v")a
nnoremap <buffer> <silent> \io :call Perl_OpenOutputFile("a")a
vnoremap <buffer> <silent> \ii :call Perl_OpenInputFile("v")a
nnoremap <buffer> <silent> \ii :call Perl_OpenInputFile("a")a
vnoremap <buffer> <silent> \isu :call Perl_Subroutine("v")f(a
nnoremap <buffer> <silent> \isu :call Perl_Subroutine("a")A
nnoremap <buffer> <silent> \ip aprint "\n";<Left><Left><Left><Left>
nnoremap <buffer> <silent> \it a$ =~ tr///xmF$a
nnoremap <buffer> <silent> \is a$ =~ s///xmF$a
nnoremap <buffer> <silent> \im a$ =~ m//xmF$a
nnoremap <buffer> <silent> \ir omy	$rgx_	= q//;F_a
nnoremap <buffer> <silent> \%= omy	%	= )=> ,=> ,);k0i		k0i		2k^f%a
nnoremap <buffer> <silent> \% omy	%;i
nnoremap <buffer> <silent> \@= omy	@	= ( , ,  );F@a
nnoremap <buffer> <silent> \@ omy	@;i
nnoremap <buffer> <silent> \$$ omy	( $, $ );2F$a
nnoremap <buffer> <silent> \$= omy	$	= ;F$a
nnoremap <buffer> <silent> \$ omy	$;i
vnoremap <buffer> <silent> \s{ :call Perl_Block("v")
vnoremap <buffer> <silent> \sw :call Perl_StatBlock( "v", "while (  ) {", "}" )f(la
vnoremap <buffer> <silent> \st :call Perl_StatBlock( "v", "until (  ) {", "}" )f(la
vnoremap <buffer> <silent> \sue :call Perl_StatBlock( "v", "unless (  ) {", "}\nelse {\n}" )f(la
vnoremap <buffer> <silent> \su :call Perl_StatBlock( "v", "unless (  ) {", "}" )f(la
vnoremap <buffer> <silent> \sie :call Perl_StatBlock( "v", "if (  ) {", "}\nelse {\n}" )f(la
vnoremap <buffer> <silent> \si :call Perl_StatBlock( "v", "if (  ) {", "}" )f(la
vnoremap <buffer> <silent> \sfe :call Perl_StatBlock( "v", "foreach my $ (  ) {", "}" )f$a
vnoremap <buffer> <silent> \sf :call Perl_StatBlock( "v", "for ( ; ; ) {", "}" )f;i
vnoremap <buffer> <silent> \sd :call Perl_DoWhile("v")f(la
nnoremap <buffer> <silent> \s{ :call Perl_Block("a")o
nnoremap <buffer> <silent> \sw :call Perl_StatBlock( "a", "while (  ) {\n}", "" )f(la
nnoremap <buffer> <silent> \st :call Perl_StatBlock( "a", "until (  ) {\n}", "" )f(la
nnoremap <buffer> <silent> \sue :call Perl_StatBlock( "a", "unless (  ) {\n}\nelse {\n}", "" )f(la
nnoremap <buffer> <silent> \su :call Perl_StatBlock( "a", "unless (  ) {\n}", "" )f(la
nnoremap <buffer> <silent> \sie :call Perl_StatBlock( "a", "if (  ) {\n}\nelse {\n}", "" )f(la
nnoremap <buffer> <silent> \si :call Perl_StatBlock( "a", "if (  ) {\n}", "" )f(la
nnoremap <buffer> <silent> \sfe :call Perl_StatBlock( "a", "foreach my $ (  ) {\n}", "" )f$a
nnoremap <buffer> <silent> \sf :call Perl_StatBlock( "a", "for ( ; ; ) {\n}","" )f;i
nnoremap <buffer> <silent> \sd :call Perl_DoWhile("a")f(la
nnoremap <buffer> <silent> \cn :call Perl_UncommentBlock()
vnoremap <buffer> <silent> \cb :call Perl_CommentBlock("v")
nnoremap <buffer> <silent> \cb :call Perl_CommentBlock("a")
nnoremap <buffer> <silent> \cv :call Perl_CommentVimModeline()
nnoremap <buffer> <silent> \ct a=strftime("%x %X %Z")
nnoremap <buffer> <silent> \cd a=strftime("%x")
vnoremap <buffer> <silent> \co :'<,'>s/^#//:nohlsearchj
nnoremap <buffer> <silent> \co :s/^#//:nohlsearchj
vnoremap <buffer> <silent> \cc :'<,'>s/^/#/:nohlsearchj
nnoremap <buffer> <silent> \cc :s/^/#/:nohlsearchj
nnoremap <buffer> <silent> \ckn :call Perl_CommentClassified("")          3F:i
nnoremap <buffer> <silent> \cko :call Perl_CommentClassified("WORKAROUND")A
nnoremap <buffer> <silent> \ckw :call Perl_CommentClassified("WARNING")   A
nnoremap <buffer> <silent> \ckr :call Perl_CommentClassified("TRICKY")    A
nnoremap <buffer> <silent> \ckt :call Perl_CommentClassified("TODO")      A
nnoremap <buffer> <silent> \ckb :call Perl_CommentClassified("BUG")       A
nnoremap <buffer> <silent> \ca :call Perl_CommentTemplates('test')
nnoremap <buffer> <silent> \ce :call Perl_CommentTemplates('module')
nnoremap <buffer> <silent> \ch :call Perl_CommentTemplates('header')
nnoremap <buffer> <silent> \cm :call Perl_CommentTemplates('method')
nnoremap <buffer> <silent> \cfu :call Perl_CommentTemplates('function')
nnoremap <buffer> <silent> \cfr :call Perl_CommentTemplates('frame')
nnoremap <buffer> <silent> \cs :call Perl_GetLineEndCommCol()
vnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("v")
nnoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")
vnoremap <buffer> <silent> \cl :call Perl_MultiLineEndComments()A
nnoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
map <buffer> <silent> <F9> :call Perl_Debugger():redraw!
inoremap <buffer> <silent> \px [:xdigit:]
inoremap <buffer> <silent> \pw [:word:]
inoremap <buffer> <silent> \pu [:upper:]
inoremap <buffer> <silent> \ps [:space:]
inoremap <buffer> <silent> \pn [:punct:]
inoremap <buffer> <silent> \pp [:print:]
inoremap <buffer> <silent> \pl [:lower:]
inoremap <buffer> <silent> \pg [:graph:]
inoremap <buffer> <silent> \pd [:digit:]
inoremap <buffer> <silent> \pc [:cntrl:]
inoremap <buffer> <silent> \pb [:blank:]
inoremap <buffer> <silent> \pi [:ascii:]
inoremap <buffer> <silent> \ph [:alpha:]
inoremap <buffer> <silent> \pa [:alnum:]
inoremap <buffer> <silent> \ipi :call Perl_OpenPipe("a")a
inoremap <buffer> <silent> \io :call Perl_OpenOutputFile("a")a
inoremap <buffer> <silent> \ii :call Perl_OpenInputFile("a")a
inoremap <buffer> <silent> \isu :call Perl_Subroutine("a")A
inoremap <buffer> <silent> \ip print "\n";<Left><Left><Left><Left>
inoremap <buffer> <silent> \it $ =~ tr///xmF$a
inoremap <buffer> <silent> \is $ =~ s///xmF$a
inoremap <buffer> <silent> \im $ =~ m//xmF$a
inoremap <buffer> <silent> \ir my	$rgx_	= q//;F_a
inoremap <buffer> <silent> \%= my	%	= )=> ,=> ,);k0i		k0i		2k^f%a
inoremap <buffer> <silent> \% my	%;i
inoremap <buffer> <silent> \@= my	@	= ( , ,  );F@a
inoremap <buffer> <silent> \@ my	@;i
inoremap <buffer> <silent> \$$ my	( $, $ );2F$a
inoremap <buffer> <silent> \$= my	$	= ;F$a
inoremap <buffer> <silent> \$ my	$;i
inoremap <buffer> <silent> \sw :call Perl_StatBlock( "a", "while (  ) {\n}", "" )f(la
inoremap <buffer> <silent> \st :call Perl_StatBlock( "a", "until (  ) {\n}", "" )f(la
inoremap <buffer> <silent> \sue :call Perl_StatBlock( "a", "unless (  ) {\n}\nelse {\n}", "" )f(la
inoremap <buffer> <silent> \su :call Perl_StatBlock( "a", "unless (  ) {\n}", "" )f(la
inoremap <buffer> <silent> \sie :call Perl_StatBlock( "a", "if (  ) {\n}\nelse {\n}", "" )f(la
inoremap <buffer> <silent> \si :call Perl_StatBlock( "a", "if (  ) {\n}", "" )f(la
inoremap <buffer> <silent> \sfe :call Perl_StatBlock( "a", "foreach my $ (  ) {\n}", "" )f$a
inoremap <buffer> <silent> \sf :call Perl_StatBlock( "a", "for ( ; ; ) {\n}","" )f;i
inoremap <buffer> <silent> \sd :call Perl_DoWhile("a")f(la
inoremap <buffer> <silent> \ct =strftime("%x %X %Z")
inoremap <buffer> <silent> \cd =strftime("%x")
inoremap <buffer> <silent> \ckn :call Perl_CommentClassified("")          3F:i
inoremap <buffer> <silent> \cko :call Perl_CommentClassified("WORKAROUND")A
inoremap <buffer> <silent> \ckw :call Perl_CommentClassified("WARNING")   A
inoremap <buffer> <silent> \ckr :call Perl_CommentClassified("TRICKY")    A
inoremap <buffer> <silent> \ckt :call Perl_CommentClassified("TODO")      A
inoremap <buffer> <silent> \ckb :call Perl_CommentClassified("BUG")       A
inoremap <buffer> <silent> \ca :call Perl_CommentTemplates('test')
inoremap <buffer> <silent> \ce :call Perl_CommentTemplates('module')
inoremap <buffer> <silent> \ch :call Perl_CommentTemplates('header')
inoremap <buffer> <silent> \cm :call Perl_CommentTemplates('method')
inoremap <buffer> <silent> \cfu :call Perl_CommentTemplates('function')
inoremap <buffer> <silent> \cfr :call Perl_CommentTemplates('frame')
inoremap <buffer> <silent> \cj :call Perl_AlignLineEndComm("a")a
inoremap <buffer> <silent> \cl :call Perl_LineEndComment("")A
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=:#
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal completefunc=
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=[^A-Za-z_]
setlocal dictionary=~/.vim/perl-support/wordlists/perl.list
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'perl'
setlocal filetype=perl
endif
setlocal foldcolumn=0
setlocal foldenable
set foldexpr=SF_SetFolds()
setlocal foldexpr=SF_SetFolds()
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
set foldmethod=expr
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=\\<\\(use\\|require\\)\\>
setlocal includeexpr=substitute(substitute(v:fname,'::','/','g'),'$','.pm','')
setlocal indentexpr=GetPerlIndent()
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e,0=,0),0=or,0=and
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=~/dev/fidcredit/spgUtils/trunk/src/lib/perl5/i686-linux-thread-multi,~/dev/fidcredit/spgUtils/trunk/src/lib/perl5,~/dev/fidcredit/spgWeb/trunk/src/lib/perl5,~/dev/fiditoperations/fiolib/trunk/src/lib/perl5,~/dev/fiditoperations/fioutils/trunk/src/lib/perl5,~/lib/perl5/i686-linux-thread-multi,~/lib/perl5,~/dev/fiditoperations/steelhead/trunk/src/lib/perl5,//ms/dist/perl5/PROJ/Tk/800.024-5.8/lib/perl5,//ms/dist/perl5/PROJ/Devel-ptkdb/1.1087/lib/perl5,//ms/dist/perl5/PROJ/Term-ReadLine-Gnu/1.14-5.8/lib/perl5,//ms/dist/perl5/PROJ/PadWalker/0.10-5.8/lib/perl5,//ms/dist/fiditoperations/PROJ/fioutils/qa-ng/lib/perl5,//ms/dist/fiditoperations/PROJ/fiolib/qa-ng/lib/perl5,/ms/dist/perl5/VERS/5.8.8-2-core/lib/perl5,/ms/dist/perl5/VERS/5.8-core/lib/perl5,/ms/dist/perl5/PROJ/core/5.8.8-2/.exec/ia32.linux.2.4.glibc.2.3/lib/perl5,,
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal readonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'perl'
setlocal syntax=perl
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
let s:l = 1 - ((0 * winheight(0) + 27) / 55)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . s:sx
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
